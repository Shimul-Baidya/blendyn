# eig2mr.mbd -- Simple 2 degrees of freedom harmonic oscillator
#
# MBDyn (C) is a multibody analysis code. 
# http://www.mbdyn.org
# 
# Copyright (C) 1996-2008
# 
# Pierangelo Masarati	<masarati@aero.polimi.it>
# Paolo Mantegazza	<mantegazza@aero.polimi.it>
# 
# Aerospace Science and Technology Department - Politecnico di Milano
# via La Masa, 34 - 20156 Milano, Italy
# http://www.aero.polimi.it
# 
# Changing this copyright notice is forbidden.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation (version 2 of the License).
# 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This model was written by 
# Andrea Zanoni <andrea.zanoni@polimi.it>
# and distributed with Blendyn: a Blender add-on for post-processing MBDyn
# output.
# https://github.com/zanoni-mbdyn/blendyn
#
#      ---> Z  ---> g
#  \
#  \|	  k,r      ________      k,r      ________
#  \|  |-\/\/\-|  |        |  |-\/\/\-|  |        |
#  \|--|   _   |--|   m1   |--|   _   |--|   m2   |---> F
#  \|  |--|_---|  |________|  |--|_---|  |________|
#  \|______________o______o_______________o______o______
#
#----------------------------------------------
# [ Data Block ]

begin: data;
	problem: initial value;
end: data;

#----------------------------------------------
# [ Problem Block ]

set: const real dt = 0.001;
begin: initial value;
	initial time: 0.;
	final time: 10.;
	time step: dt;
	max iterations: 10;
	tolerance: 1.e-6;
	method: ms, .6;
	linear solver: naive, colamd;
	eigenanalysis:
			dt,
			output matrices,
			output eigenvectors,
			output geometry,
			use lapack;
	derivatives tolerance: 1e38;
end: initial value;

#----------------------------------------------
# [ Control Data Block ]

begin: control data;
	structural nodes: 	+1 # 	-- static
				+2 # -- dynamic: m1, m2;
				;

	rigid bodies:		+2  # m1, m2
				;

	joints:			+1	# clamp node 0
				+1	# slider node 1
				+1  	# slider node 2
				+1	# rod node 0 - node 1
				+1	# rod node 1 - node 2
				;

	forces: 		+1
				;
	gravity;

	print: all;
	output results: netcdf;
	skip initial joint assembly;
end: control data;

#----------------------------------------------
# [ Labels ]
set: const integer REFERENCE_0 = 100;
set: const integer REFERENCE_1 = 101;
set: const integer REFERENCE_2 = 102;

set: const integer NODE_0 = 0;
set: const integer NODE_1 = 1;
set: const integer NODE_2 = 2;

set: const integer BODY_1 = 1001;
set: const integer BODY_2 = 1002;

set: const integer JOINT_CLAMP = 10;
set: const integer JOINT_TOTAL_1 = 11;
set: const integer JOINT_TOTAL_2 = 12;
set: const integer JOINT_ROD = 13;

set: const integer FORCE = 10000;

#----------------------------------------------
# [ Model Variables ] 
# -- Loaded from file defined by environment variable EIG2MD_PARAMS

include: "${EIG2MD_PARAMS}";

set: const real L01 = L0 - (m1 + m2)*g/k;
set: const real L02 = L - (m1 + 2*m2)*g/k;

#----------------------------------------------
# [ References ]

reference: REFERENCE_0,
  reference, global, null,
  reference, global, eye,
  reference, global, null,
  reference, global, null;

reference: REFERENCE_1,
  reference, global, 0., 0., L0 - (m1 + m2)*g/k,
	reference, REFERENCE_0, eye,
  reference, REFERENCE_0, null,
  reference, REFERENCE_0, null;

reference: REFERENCE_2,
	reference, global, 0, 0., L + L0 - (m1 + 2*m2)*g/k,
	reference, REFERENCE_1, eye,
  reference, REFERENCE_1, null,
  reference, REFERENCE_1, null;

#----------------------------------------------
# [ Nodes Block ]

begin: nodes;
	structural: NODE_0,
		static,
			reference, REFERENCE_0, null,
			reference, REFERENCE_0, eye,
			reference, REFERENCE_0, null,
			reference, REFERENCE_0, null;

	structural: NODE_1,
	  dynamic,
			reference, REFERENCE_1, null,
			reference, REFERENCE_1, eye,
			reference, REFERENCE_1, null,
			reference, REFERENCE_1, null
		  ;

	structural: NODE_2,
		dynamic,
			reference, REFERENCE_2, null,
			reference, REFERENCE_2, eye,
			reference, REFERENCE_2, null,
			reference, REFERENCE_2, null
		  ;
end: nodes;

#----------------------------------------------
# [ Elements Block ]

begin: elements;

	body: BODY_1, NODE_1,
	  	m1,
		reference, node, null,
		eye
	;

	body: BODY_2, NODE_2,
		m2,
		reference, node, null,
		eye
	;

	joint: JOINT_CLAMP,
		total pin joint,
			NODE_0,
				position, reference, node, null,
				rotation orientation, reference, node, eye,
				position orientation, reference, node, eye,
			position constraint,
				1, 1, 1,
					null,
					# component,
					# mult,
					#   cosine, 0.01, pi, .5, half, 0.,
					#   cosine, 1.01, 3*pi, .01, forever, 0.,
					# const, 0.,
					# const, 0.,
			orientation constraint,
				1, 1, 1, null
	;

	joint: JOINT_TOTAL_1,
		total joint,
			NODE_0,
				position, reference, REFERENCE_0, null,
				position orientation, reference, node, eye,
				rotation orientation, reference, node, eye,
		  NODE_1,
				position, reference, REFERENCE_1, null,
				position orientation, reference, node, eye,
				rotation orientation, reference, node, eye,
			position constraint,
				1, 1, 0, null,
			orientation constraint,
				1, 1, 1, null
	;

	joint: JOINT_TOTAL_2,
		total joint,
			NODE_1,
				position, reference, REFERENCE_1, null,
				position orientation, reference, node, eye,
				rotation orientation, reference, node, eye,
			NODE_2,
				position, reference, REFERENCE_2, null,
				position orientation, reference, node, eye,
				rotation orientation, reference, node, eye,
			position constraint,
				1, 1, 0, null,
	    		orientation constraint,
				1, 1, 1, null
	;

	joint: JOINT_ROD,
		rod,
			NODE_0,
				position, reference, node, null,
			NODE_1,
				position, reference, node, null,
			L0,
				linear viscoelastic, k*L0, r*L0
				# prestrain, -(L01 - L0)/L0
	;

	joint: JOINT_ROD + 1,
		rod,
			NODE_1,
				position, reference, node, null,
			NODE_2,
				position, reference, node, null,
			L,
				linear viscoelastic, k*L, r*L
				# prestrain, -(L02 - L)/L
	;

	force: FORCE,
	    absolute,
	      NODE_2,
	        position, reference, node, null,
	        0., 0., 1., step, 1.0, F0, 0.
		# 0., 0., 1., const, 0.
	;

	# gravity: uniform, 0., 0., -9.81, cosine, 0., pi, .5, half, 0.;
	gravity: uniform, 0., 0., -1., const, g;

end:elements;
